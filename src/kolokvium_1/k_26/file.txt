import javax.swing.*;
import java.lang.management.OperatingSystemMXBean;
import java.util.*;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Stream;


class Line {
    Double coeficient;
    Double x;
    Double intercept;

    public Line(Double coeficient, Double x, Double intercept) {
        this.coeficient = coeficient;
        this.x = x;
        this.intercept = intercept;
    }

    public static Line createLine(String line) {
        String[] parts = line.split("\\s+");
        return new Line(
                Double.parseDouble(parts[0]),
                Double.parseDouble(parts[1]),
                Double.parseDouble(parts[2])
        );
    }

    public double calculateLine() {
        return coeficient * x + intercept;
    }

    @Override
    public String toString() {
        return String.format("%.2f * %.2f + %.2f", coeficient, x, intercept);
    }
}

class Equation<V, I> {
    Supplier<V> supplier;
    Function<V, I> fn;

    public Optional<I> calculate() {
        return Optional.of(fn.apply(supplier.get()));
    }

    public Equation(Supplier<V> supplier, Function<V, I> fn) {
        this.supplier = supplier;
        this.fn = fn;
    }

}

class EquationProcessor {
    static <V, I> void process(List<V> inputs, List<Equation<V, I>> equations) {
        for (V x : inputs) {
            System.out.printf("Input: " + x);
        }
        Set<Optional<I>> results = new HashSet<>();
        for (int i = 0; i < inputs.size(); i++) {
            results.add(equations.get(i).calculate()))
        }
    }
}

public class EquationTester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int testCase = Integer.parseInt(sc.nextLine());

        if (testCase == 1) { // Testing with Integer, Integer
            List<Equation<Integer, Integer>> equations1 = new ArrayList<>();
            List<Integer> inputs = new ArrayList<>();
            while (sc.hasNext()) {
                inputs.add(Integer.parseInt(sc.nextLine()));
            }

            Equation<Integer, Integer> eq = new Equation<Integer, Integer>(
                    () -> inputs.get(2),
                    i -> i + 1000
            );
            equations1.add(eq);

            // TODO: Add an equation where you get the 3rd integer from the inputs list, and the result is the sum of that number and the number 1000.
            Equation<Integer, Integer> eq2 = new Equation<Integer, Integer>(
                    () -> inputs.get(4),
                    i -> Math.max(i, 100)
            );

            // TODO: Add an equation where you get the 4th integer from the inputs list, and the result is the maximum of that number and the number 100.

            EquationProcessor.process(inputs, equations1);

        } else { // Testing with Line, Integer
            List<Equation<Line, Double>> equations2 = new ArrayList<>();
            List<Line> inputs = new ArrayList<>();
            while (sc.hasNext()) {
                inputs.add(Line.createLine(sc.nextLine()));
            }
            Equation<Line, Double> eq2 = new Equation<Line, Double>(
                    () -> inputs.get(1),
                    Line::calculateLine
            );
            //TODO Add an equation where you get the 2nd line, and the result is the value of y in the line equation.
            Equation<Line, Double> eq3 = new Equation<Line, Double>(
                    () -> inputs.get(0),
                    i -> inputs.stream()
                            .mapToDouble(Line::calculateLine) // l
                            .filter(x -> i.calculateLine() < x)
                            .sum()
            );

            //TODO Add an equation where you get the 1st line, and the result is the sum of all y values for all lines that have a greater y value than that equation.

            EquationProcessor.process(inputs, equations2);
        }
    }
}
